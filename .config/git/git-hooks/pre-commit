#!/bin/bash
set -eo pipefail

# --------------------------
# Function Definitions
# --------------------------
export GITLEAKS_CONFIG=~/.config/git/gitleaks.toml

setup_temp_workspace() {
    local -n tmpdir_ref=$1
    tmpdir_ref=$(mktemp -d)
    trap 'rm -rf "$tmpdir_ref"' EXIT
}

get_staged_files() {
    git diff --name-only --cached --diff-filter=d | while IFS= read -r file; do
        # Skip binary files
        if ! git check-attr binary -- "$file" | grep -q 'binary: set'; then
            # Skip git-crypt encrypted files that aren't decrypted
            if ! git-crypt status "$file" 2>/dev/null | grep -q '^encrypted'; then
                echo "$file"
            fi
        fi
    done
}

export_staged_files() {
    local files=$1
    local tmpdir=$2
    while IFS= read -r file; do
        mkdir -p "$tmpdir/$(dirname "$file")"
        git show ":0:$file" > "$tmpdir/$file" 2>/dev/null || continue
    done <<< "$files"
}

# --------------------------
# Main Execution
# --------------------------
main() {
    local tmpdir
    local files
    local output_file
    local exit_code

    setup_temp_workspace tmpdir
    files=$(get_staged_files)
    
    [ -z "$files" ] && exit 0
    
    # Export all staged files to temp dir
    export_staged_files "$files" "$tmpdir"
    
    # Create temp file for output
    output_file=$(mktemp)
    trap 'rm -f "$output_file"' EXIT
    
    # Scan temp dir once
    set +e
    gitleaks directory --no-banner -v "$tmpdir" >"$output_file" 2>&1
    exit_code=$?
    set -e
    
    if [ $exit_code -eq 0 ]; then
        printf "\033[0;32mgitleaks: no leaks found\033[0m\n"
        exit 0
    else
        printf "gitleaks: leaks found in staged changes\n"
        cat "$output_file"
        exit 1
    fi
}

main
